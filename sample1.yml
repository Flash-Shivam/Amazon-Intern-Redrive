---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template configuring calculator functionality in Lambda

Globals:
  Function:
    # Documentation and other DeploymentPreference Types can be found here: https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce

Parameters:
  AttachLambdaFunctionToVPC: { Type: String, Default: 'false', AllowedValues: ['true', 'false']}
  Stage:
    Type: String
    Default: 'beta'
    AllowedValues: ["beta", "gamma", "prod"]
  Realm:
    Type: String
    Default: 'EUAmazon'
    AllowedValues: ['EUAmazon', 'INAmazon', 'NAAmazon', 'FEAmazon']
  UseBatsKeyParam: {Type: String, Default: 'false', AllowedValues: ['true','false']}
  DeploymentBucketImportName:
    Type: String
    Default: "DeploymentBucket"
  ConsumerName:
    Description: "Name of the enhanced fanout consumer of Kinesis Data Stream"
    Default: "DataConsumer"
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Type: String
Conditions:
  UseBatsKey:
    'Fn::Equals':
      - {Ref: UseBatsKeyParam}
      - 'true'
  RunLambdaInVPC:
    Fn::Equals: [ {Ref: AttachLambdaFunctionToVPC}, "true"]
Resources:

  LambdaSecurityGroup:
    Condition: RunLambdaInVPC
    Metadata: {Comment: ''}
    Properties:
      GroupDescription: Allow all outbound access
      SecurityGroupEgress:
      - CidrIp: "0.0.0.0/0"
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      Tags:
      - Key: Name
        Value: "Lambda VPC security group"
      VpcId: {'Fn::ImportValue': VPC}
    Type: AWS::EC2::SecurityGroup


  #---------------------------------------- Lambda functions ----------------------------------------
  # Entry point for Lambda invocation
  AuditTrailWriterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'com.amazon.transportation.ids.audittrailwriter.lambda.handler.LambdaInvocationHandler::handleRequest'
      Runtime: java8
      CodeUri:
        # Why are we using this instead of BATS::SAM::CodeS3Bucket?
        # Simply put, chicken and egg.
        # BATS::SAM::S3Bucket just falls back to a pipeline parameter. Problem is, we can't know that bucket name at synthesis time.
        # So we just import it.
        Bucket: {'Fn::If' : ['UseBatsKey', 'BATS::SAM::CodeS3Bucket', {"Fn::ImportValue" : {Ref: 'DeploymentBucketImportName'}}]}
        Key: BATS::SAM::CodeS3Key
      Description: Common handler for package and container related Kinesis event streams.
      Timeout: 10
      MemorySize: 1024
      Role:
        Fn::GetAtt: [LambdaRole, Arn]
      VpcConfig:
        Fn::If:
        - RunLambdaInVPC
        - SecurityGroupIds: [{Ref: LambdaSecurityGroup}]
          SubnetIds:
          - {'Fn::ImportValue': PrivateSubnet01}
          - {'Fn::ImportValue': PrivateSubnet02}
        - {Ref: 'AWS::NoValue'}
      Environment:
        Variables:
          Stage: {Ref: Stage}
          Realm: {Ref: Realm}
          AWSRegion: {Ref: AWS::Region}

  # ---------------------------------------- Lambda Role ----------------------------------------
  LambdaRole:
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
            - Action: ['kinesis:SubscribeToShard']
              Effect: Allow
              Resource: { Ref: KEnhancedFanout }
            - Fn::If:
              - RunLambdaInVPC
              - Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DeleteNetworkInterface']
                Effect: Allow
                Resource: '*'
              - {Ref: 'AWS::NoValue'}
            Version: '2012-10-17'
          PolicyName: lambdaRoleAPIG
    Type: AWS::IAM::Role
     # KDS Enhanced fanout consumer for  Kinesis stream
  KEnhancedFanout:
    Type: AWS::Kinesis::StreamConsumer
    Properties:
      ConsumerName: {Ref: ConsumerName}
      StreamARN: !FindInMap [KinesisArn, !Ref AWS::Region, !Ref Stage]
  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - AuditTrailWriterLambda
          - Arn
      EventSourceArn: { "Ref": "KEnhancedFanout" }
      StartingPosition: LATEST
      BatchSize: 100 # number of records

Outputs:
  StackArn:
    Value:
      Ref: AWS::StackId
    Description: Use this as the stack_arn in your cloud_formation_deployment_stack override.
